openapi: 3.0.0
info:
  title: Martian Authentificator
  version: 0.0.1

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
    Task:
      required:
        - title
      properties:
        id:
          type: string
        title:
          type: string
        order:
          type: number
        description:
          type: string
        userId:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /greeting:
    get:
      tags:
        - Greeting
      summary: Hello world page
      description: Gets all users (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user (remove password from response)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - name
      responses:
        200:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Gets a user by ID
        e.g. “/users/123” (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user
      description: Updates a user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: The user's name
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - name
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID. When somebody
        DELETE User, all Tasks where User is assignee
        should be updated to put userId=null
      responses:
        204:
          description: The user has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /boards:
    get:
      tags:
        - Boards
      summary: Get all boards
      description: Returns all boards
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Board"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Boards
      summary: Create board
      description: Creates a new board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                title:
                  type: string
                  description: The board's name
                columns:
                  type: array
                  description: The board's column list
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      order:
                        type: integer
                  required:
                    - title
                    - order
              required:
                - title
                - columns
      responses:
        200:
          description: The board has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /boards/{boardId}:
    parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Boards
      summary: Get board by id
      description: Gets the Board by ID (e.g. “/boards/123”)
      responses:
        200:
          description: Successful operation